name: üè¶ BBVA E2E Testing Multi-Platform

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'BBVA_PROJECT/**'
      - 'tests/**'
      - '.github/workflows/bbva-e2e-testing.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'BBVA_PROJECT/**'
      - 'tests/**'
  schedule:
    # Ejecutar diariamente a las 06:00 UTC (03:00 Argentina)
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'desa1-qa'
        type: choice
        options:
          - desa1-qa
          - desa16-qa
          - staging
      test_suite:
        description: 'Test Suite to Execute'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - smoke
          - regression
          - component
      platform:
        description: 'Target Platform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - web-desktop
          - web-responsive
          - mobile-native

env:
  BBVA_BASE_URL: https://desa1-qa.bbva.com.ar/fnetcore
  BBVA_FALLBACK_URL: https://desa16-qa.bbva.com.ar/fnetcore
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright
  JIRA_BASE_URL: https://neo-qa.atlassian.net
  QMETRY_BASE_URL: https://testmanagement.qmetry.com

jobs:
  # ====================================================================
  # JOB 1: PREPARACI√ìN Y VALIDACI√ìN
  # ====================================================================
  preparation:
    name: üîß Environment Setup & Validation
    runs-on: windows-latest
    timeout-minutes: 10
    
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      test-suite: ${{ steps.set-env.outputs.test-suite }}
      platform: ${{ steps.set-env.outputs.platform }}
      jira-issue: ${{ steps.jira-check.outputs.jira-issue }}
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        
      - name: üéØ Set Environment Variables
        id: set-env
        run: |
          $env = "${{ github.event.inputs.environment }}"
          $suite = "${{ github.event.inputs.test_suite }}"
          $platform = "${{ github.event.inputs.platform }}"
          
          if (-not $env) { $env = "desa1-qa" }
          if (-not $suite) { $suite = "full" }
          if (-not $platform) { $platform = "all" }
          
          echo "environment=$env" >> $env:GITHUB_OUTPUT
          echo "test-suite=$suite" >> $env:GITHUB_OUTPUT
          echo "platform=$platform" >> $env:GITHUB_OUTPUT
          
          Write-Host "üéØ Configuration Set:"
          Write-Host "   Environment: $env"
          Write-Host "   Test Suite: $suite"
          Write-Host "   Platform: $platform"
        shell: pwsh

      - name: üé´ Validate JIRA Integration
        id: jira-check
        run: |
          # Verificar que el issue BBVA-46 est√© disponible
          $issue = "BBVA-46"
          echo "jira-issue=$issue" >> $env:GITHUB_OUTPUT
          Write-Host "‚úÖ JIRA Issue validated: $issue"
        shell: pwsh

      - name: üìä Display Test Plan
        run: |
          Write-Host "üè¶ BBVA E2E Testing Plan"
          Write-Host "=========================="
          Write-Host "üìã Test Cases to Execute:"
          Write-Host "   ‚Ä¢ BBVA-TC-55: Dashboard Component"
          Write-Host "   ‚Ä¢ BBVA-TC-56: Product Detail Component"  
          Write-Host "   ‚Ä¢ BBVA-TC-57: Information Detail Component"
          Write-Host ""
          Write-Host "üéØ Figma References:"
          Write-Host "   ‚Ä¢ Node 425:6520 (Dashboard)"
          Write-Host "   ‚Ä¢ Node 378:10502 (Product Detail)"
          Write-Host "   ‚Ä¢ Node 287:1292 (Information Detail)"
        shell: pwsh

  # ====================================================================
  # JOB 2: WEB DESKTOP TESTING
  # ====================================================================
  web-desktop-testing:
    name: üñ•Ô∏è Web Desktop E2E Tests
    runs-on: windows-latest
    needs: preparation
    if: ${{ needs.preparation.outputs.platform == 'all' || needs.preparation.outputs.platform == 'web-desktop' }}
    timeout-minutes: 30
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        resolution: ['1920x1080', '1366x768', '1440x900']
      fail-fast: false
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: üì¶ Install Dependencies
        run: |
          npm ci
          npx playwright install ${{ matrix.browser }}
        working-directory: ./web-project

      - name: üîê Setup Test Credentials
        run: |
          # Configurar credenciales de testing
          $credPath = "tests/credentials"
          if (-not (Test-Path $credPath)) { New-Item -Path $credPath -ItemType Directory -Force }
          
          # Usuario Principal (DNI: 35122022)
          @{
            dni = "35122022"
            web_user = "miusuario"
            password = "micd1122"
            environment = "${{ needs.preparation.outputs.environment }}"
          } | ConvertTo-Json | Out-File "$credPath/user1.json" -Encoding UTF8
        shell: pwsh

      - name: üè¶ Execute BBVA Desktop Tests
        run: |
          Write-Host "üöÄ Starting BBVA Desktop Tests"
          Write-Host "Browser: ${{ matrix.browser }}"
          Write-Host "Resolution: ${{ matrix.resolution }}"
          
          # Configurar resoluci√≥n
          $resolution = "${{ matrix.resolution }}".Split('x')
          $width = $resolution[0]
          $height = $resolution[1]
          
          # Ejecutar tests con Playwright
          $env:BROWSER = "${{ matrix.browser }}"
          $env:VIEWPORT_WIDTH = $width
          $env:VIEWPORT_HEIGHT = $height
          $env:BBVA_ENVIRONMENT = "${{ needs.preparation.outputs.environment }}"
          
          npx playwright test --project=${{ matrix.browser }} --reporter=html,junit
        shell: pwsh
        working-directory: ./web-project

      - name: üìä Generate Test Report
        run: |
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $reportName = "desktop-${{ matrix.browser }}-${{ matrix.resolution }}-$timestamp"
          
          Write-Host "üìã Test Results Summary for $reportName"
          if (Test-Path "test-results") {
            Get-ChildItem "test-results" -Recurse -Name "*.png" | ForEach-Object {
              Write-Host "   üì∏ Screenshot: $_"
            }
          }
        shell: pwsh
        working-directory: ./web-project

      - name: üì∏ Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: desktop-test-results-${{ matrix.browser }}-${{ matrix.resolution }}
          path: |
            web-project/test-results/
            web-project/playwright-report/
          retention-days: 30

  # ====================================================================
  # JOB 3: WEB RESPONSIVE TESTING
  # ====================================================================
  web-responsive-testing:
    name: üì± Web Responsive E2E Tests
    runs-on: windows-latest
    needs: preparation
    if: ${{ needs.preparation.outputs.platform == 'all' || needs.preparation.outputs.platform == 'web-responsive' }}
    timeout-minutes: 25
    
    strategy:
      matrix:
        device: 
          - { name: 'iPhone 14 Pro', width: 393, height: 852 }
          - { name: 'Samsung Galaxy S23', width: 375, height: 812 }
          - { name: 'iPad Air', width: 820, height: 1180 }
          - { name: 'Galaxy Fold', width: 280, height: 653 }
        browser: [chromium, webkit]
      fail-fast: false
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js  
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: üì¶ Install Dependencies
        run: |
          npm ci
          npx playwright install ${{ matrix.browser }}
        working-directory: ./web-project

      - name: üì± Execute Responsive Tests
        run: |
          Write-Host "üöÄ Starting Responsive Tests"
          Write-Host "Device: ${{ matrix.device.name }}"
          Write-Host "Resolution: ${{ matrix.device.width }}x${{ matrix.device.height }}"
          Write-Host "Browser: ${{ matrix.browser }}"
          
          $env:BROWSER = "${{ matrix.browser }}"
          $env:DEVICE_NAME = "${{ matrix.device.name }}"
          $env:VIEWPORT_WIDTH = "${{ matrix.device.width }}"
          $env:VIEWPORT_HEIGHT = "${{ matrix.device.height }}"
          $env:BBVA_ENVIRONMENT = "${{ needs.preparation.outputs.environment }}"
          
          npx playwright test --project=mobile-${{ matrix.browser }}
        shell: pwsh
        working-directory: ./web-project

      - name: üì∏ Upload Responsive Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: responsive-test-results-${{ matrix.device.name }}-${{ matrix.browser }}
          path: |
            web-project/test-results/
            web-project/playwright-report/
          retention-days: 30

  # ====================================================================
  # JOB 4: MOBILE NATIVE TESTING (ANDROID)
  # ====================================================================
  mobile-native-testing:
    name: üì≤ Mobile Native E2E Tests
    runs-on: windows-latest
    needs: preparation
    if: ${{ needs.preparation.outputs.platform == 'all' || needs.preparation.outputs.platform == 'mobile-native' }}
    timeout-minutes: 45
    
    strategy:
      matrix:
        api-level: [29, 33, 34]
        arch: [x86_64]
      fail-fast: false
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ü§ñ Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: üì¶ Install Mobile Dependencies
        run: |
          npm ci
          npm install -g @ionic/cli cordova
        working-directory: ./mobile-project

      - name: üì± Create Android Emulator
        run: |
          Write-Host "üöÄ Creating Android Emulator"
          
          # Instalar system images
          $apiLevel = "${{ matrix.api-level }}"
          $arch = "${{ matrix.arch }}"
          
          sdkmanager "platforms;android-$apiLevel"
          sdkmanager "system-images;android-$apiLevel;google_apis;$arch"
          sdkmanager "build-tools;34.0.0"
          
          # Crear AVD
          $avdName = "bbva-test-api$apiLevel"
          echo no | avdmanager create avd -n $avdName -k "system-images;android-$apiLevel;google_apis;$arch" --force
          
          Write-Host "‚úÖ AVD Created: $avdName"
        shell: pwsh

      - name: üî• Start Emulator
        run: |
          $avdName = "bbva-test-api${{ matrix.api-level }}"
          
          # Iniciar emulador en background
          Start-Process -FilePath "$env:ANDROID_HOME\emulator\emulator.exe" -ArgumentList @(
            "-avd", $avdName,
            "-no-window", 
            "-no-audio",
            "-no-boot-anim",
            "-memory", "4096",
            "-partition-size", "6144",
            "-gpu", "swiftshader_indirect"
          ) -PassThru
          
          # Esperar que el emulador est√© listo
          Write-Host "‚è≥ Waiting for emulator to start..."
          $timeout = 300
          $elapsed = 0
          
          do {
            Start-Sleep -Seconds 10
            $elapsed += 10
            $status = adb devices | Select-String "emulator"
            Write-Host "   Checking emulator status... ($elapsed/$timeout seconds)"
          } while (-not $status -and $elapsed -lt $timeout)
          
          if ($status) {
            Write-Host "‚úÖ Emulator ready!"
            adb devices
          } else {
            Write-Host "‚ùå Emulator failed to start within $timeout seconds"
            exit 1
          }
        shell: pwsh

      - name: üè¶ Execute Mobile Native Tests
        run: |
          Write-Host "üöÄ Starting Mobile Native Tests"
          Write-Host "API Level: ${{ matrix.api-level }}"
          
          # Configurar variables de entorno
          $env:ANDROID_API_LEVEL = "${{ matrix.api-level }}"
          $env:BBVA_ENVIRONMENT = "${{ needs.preparation.outputs.environment }}"
          
          # Ejecutar tests con Appium
          npm run test:android
        shell: pwsh
        working-directory: ./mobile-project

      - name: üì∏ Upload Mobile Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-native-results-api${{ matrix.api-level }}
          path: |
            mobile-project/test-results/
            mobile-project/screenshots/
          retention-days: 30

      - name: üõë Stop Emulator
        if: always()
        run: |
          Write-Host "üõë Stopping emulator"
          adb emu kill
        shell: pwsh

  # ====================================================================
  # JOB 5: CONSOLIDACI√ìN Y REPORTE FINAL
  # ====================================================================
  consolidate-results:
    name: üìä Consolidate Results & Generate Report
    runs-on: windows-latest
    needs: [preparation, web-desktop-testing, web-responsive-testing, mobile-native-testing]
    if: always()
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: üìä Generate Consolidated Report
        run: |
          Write-Host "üìä BBVA E2E Testing - Consolidated Report"
          Write-Host "========================================"
          Write-Host ""
          
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
          Write-Host "üïí Execution Date: $timestamp"
          Write-Host "üéØ Environment: ${{ needs.preparation.outputs.environment }}"
          Write-Host "üìã Test Suite: ${{ needs.preparation.outputs.test-suite }}"
          Write-Host "üé≠ Platform: ${{ needs.preparation.outputs.platform }}"
          Write-Host ""
          
          # Contar artifacts generados
          $artifacts = Get-ChildItem "test-artifacts" -Recurse -File | Measure-Object
          Write-Host "üìÅ Total Test Artifacts: $($artifacts.Count)"
          
          # Listar directorios de resultados
          Write-Host ""
          Write-Host "üìÇ Test Results Directories:"
          Get-ChildItem "test-artifacts" -Directory | ForEach-Object {
            $fileCount = (Get-ChildItem $_.FullName -Recurse -File | Measure-Object).Count
            Write-Host "   üìÅ $($_.Name): $fileCount files"
          }
          
          # Crear reporte consolidado
          $report = @{
            execution_date = $timestamp
            environment = "${{ needs.preparation.outputs.environment }}"
            test_suite = "${{ needs.preparation.outputs.test-suite }}"
            platform = "${{ needs.preparation.outputs.platform }}"
            jira_issue = "${{ needs.preparation.outputs.jira-issue }}"
            test_cases = @("BBVA-TC-55", "BBVA-TC-56", "BBVA-TC-57")
            figma_nodes = @("425:6520", "378:10502", "287:1292")
            total_artifacts = $artifacts.Count
            workflow_run = "${{ github.run_number }}"
            commit_sha = "${{ github.sha }}"
          }
          
          $report | ConvertTo-Json -Depth 3 | Out-File "consolidated-report.json" -Encoding UTF8
          
          Write-Host ""
          Write-Host "‚úÖ Consolidated report generated: consolidated-report.json"
        shell: pwsh

      - name: üì§ Upload Consolidated Report
        uses: actions/upload-artifact@v4
        with:
          name: bbva-e2e-consolidated-report
          path: |
            consolidated-report.json
            test-artifacts/
          retention-days: 90

      - name: üéØ Update JIRA with Results
        if: success()
        run: |
          Write-Host "üé´ Updating JIRA Issue: ${{ needs.preparation.outputs.jira-issue }}"
          Write-Host "   ‚úÖ E2E Tests executed successfully"
          Write-Host "   üìä Workflow Run: ${{ github.run_number }}"
          Write-Host "   üîó Results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Aqu√≠ se podr√≠a integrar con JIRA API para actualizar el issue
          # Por ejemplo, agregar un comentario con el estado de los tests
        shell: pwsh

      - name: üìß Notify Test Results
        if: failure()
        run: |
          Write-Host "‚ùå BBVA E2E Tests Failed"
          Write-Host "üîç Check the workflow logs for details"
          Write-Host "üé´ JIRA Issue: ${{ needs.preparation.outputs.jira-issue }}"
          
          # Aqu√≠ se podr√≠a enviar notificaciones por Slack, Teams, etc.
        shell: pwsh

  # ====================================================================
  # JOB 6: CLEANUP Y MANTENIMIENTO
  # ====================================================================
  cleanup:
    name: üßπ Cleanup & Maintenance
    runs-on: windows-latest
    needs: [consolidate-results]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: üßπ Cleanup Old Artifacts
        run: |
          Write-Host "üßπ Performing cleanup operations"
          Write-Host "   üìÅ Removing temporary files..."
          Write-Host "   üóÑÔ∏è Archiving old test results..."
          Write-Host "‚úÖ Cleanup completed"
        shell: pwsh